#Note Coursera JupyterLabs keep crashing and didn't download, so I have copied the code to notepad.

#Extracting and Visualizing Stock Data
#Description
#Extracting essential data from a dataset and displaying it is a necessary part of data science; therefore individuals can make correct decisions based on the data. In this assignment, you will extract some stock data, you will then display this data in a graph.

!pip install yfinance
!pip install bs4
!pip install nbformat

import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots

#In Python, you can ignore warnings using the warnings module. You can use the filterwarnings function to filter or ignore specific warning messages or categories.

import warnings
# Ignore all warnings
warnings.filterwarnings("ignore", category=FutureWarning)

#Define Graphing Function
#In this section, we define the function make_graph. You don't have to know how the function works, you should only care about the inputs. It takes a dataframe with stock data (dataframe must contain Date and Close columns), a dataframe with revenue data (dataframe must contain Date and Revenue columns), and the name of the stock.

def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    stock_data_specific = stock_data[stock_data.Date <= '2021-06-14']
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True), y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True), y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
    height=900,
    title=stock,
    xaxis_rangeslider_visible=True)
    fig.show()

#Question 1: Use yfinance to Extract Stock Data
#Using the Ticker function enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is Tesla and its ticker symbol is TSLA.

tesla = yf.Ticker("TSLA")

#Using the ticker object and the function history extract stock information and save it in a dataframe named tesla_data. Set the period parameter to "max" so we get information for the maximum amount of time.

tesla_data = tesla.history(period="max")

#Reset the index using the reset_index(inplace=True) function on the tesla_data DataFrame and display the first five rows of the tesla_data dataframe using the head function. Take a screenshot of the results and code from the beginning of Question 1 to the results below.

tesla_data.reset_index(inplace=True)
tesla_data.head()


#Question 2: Use Webscraping to Extract Tesla Revenue Data

# URL of the webpage containing the Tesla Revenue table
url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"

# Send a GET request to the URL
html_data = requests.get(url)

# Parse the HTML data using BeautifulSoup
beautiful_soup = BeautifulSoup(html_data.text, 'html.parser')

# Extract the table with Tesla Revenue and store it into a dataframe named tesla_revenue

tesla_revenue = pd.DataFrame(columns=["Date", "Revenue"])
table1 = beautiful_soup.find_all('tbody')[1]

for row in table1.find_all("tr"):  # in html table row is represented by the tag <tr>
    cols = row.find_all("td")
    Date = cols[0].text.strip()
    Revenue = cols[1].text.strip()
    # Append the data to the dataframe
    tesla_revenue = pd.concat([tesla_revenue, pd.DataFrame({"Date": [Date], "Revenue": [Revenue]})], ignore_index=True)


# Execute the following line to remove the comma and dollar sign from the Revenue column
tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace('$', "")
tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',', "")

# Execute the following lines to remove any null or empty strings in the Revenue column
tesla_revenue.dropna(inplace=True)
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]

# Display the last 5 rows of the tesla_revenue dataframe using the tail function
tesla_revenue.tail()


#Question 3: Use yfinance to Extract Stock Data
#Using the Ticker function enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is GameStop and its ticker symbol is GME.

GameStop = yf.Ticker("GME")

#Using the ticker object and the function history extract stock information and save it in a dataframe named GME_data. Set the period parameter to "max" so we get information for the maximum amount of time.

GME_data = telsa.history(period="max")

#Reset the index using the reset_index(inplace=True) function on the GME_data DataFrame and display the first five rows of the GME_data dataframe using the head function. Take a screenshot of the results and code from the beginning of Question 3 to the results below.

GME_data.reset_index(inplace=True)
GME_data.head()


#Question 4: Use Webscraping to Extract GameStop Revenue Data

# URL of the webpage containing the Tesla Revenue table
url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html."

# Send a GET request to the URL
html_data_2 = requests.get(url)

# Parse the HTML data using BeautifulSoup
beautiful_soup2 = BeautifulSoup(html_data_2.text, 'html.parser')

# Extract the table with Tesla Revenue and store it into a dataframe named tesla_revenue
GME_revenue = pd.DataFrame(columns=["Date", "Revenue"])
table2 = beautiful_soup2.find_all('tbody')[1]

for row in table2.find_all("tr"):  # in html table row is represented by the tag <tr>
    cols = row.find_all("td")
    Date = cols[0].text.strip()
    Revenue = cols[1].text.strip()
    # Append the data to the dataframe
    GME_revenue = pd.concat([GME_revenue, pd.DataFrame({"Date": [Date], "Revenue": [Revenue]})], ignore_index=True)

# Execute the following line to remove the comma and dollar sign from the Revenue column
GME_revenue["Revenue"] = GME_revenue['Revenue'].str.replace('$', "")
GME_revenue["Revenue"] = GME_revenue['Revenue'].str.replace(',', "")

# Execute the following lines to remove any null or empty strings in the Revenue column
GME_revenue.dropna(inplace=True)
GME_revenue = GME_revenue[GME_revenue['Revenue'] != ""]

# Display the last 5 rows of the tesla_revenue dataframe using the tail function
print(GME_revenue.tail())


#Question 5: Plot Tesla Stock Graph
#Use the make_graph function to graph the Tesla Stock Data, also provide a title for the graph. Note the graph will only show data upto June 2021.

tesla_data.columns = ['Date','Close', 'Open', 'High', 'Low', 'Volume', 'Dividends']
html_data = tesla_data
tesla_data['Date'] = tesla_data['Date'].astype(str)
tesla_revenue['Date'] = tesla_revenue['Date'].astype(str)

# Function to make the graph
def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing=.3)
    stock_data_specific = stock_data[stock_data['Date'] <= '2021-06-14']
    revenue_data_specific = revenue_data[revenue_data['Date'] <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific['Date'], infer_datetime_format=True), y=stock_data_specific['Close'].astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific['Date'], infer_datetime_format=True), y=revenue_data_specific['Revenue'].astype("float"), name="Revenue"), row=2, col=1)
    fig.update_layout(title_text=stock, height=600, width=800)
    fig.show()

# Use the make_graph function to graph the Tesla Stock Data
make_graph(tesla_data, tesla_revenue, 'Tesla')


#Question 6: Plot GameStop Stock Graph
#Use the make_graph function to graph the GameStop Stock Data, also provide a title for the graph. The structure to call the make_graph function is make_graph(gme_data, gme_revenue, 'GameStop'). Note the graph will only show data upto June 2021.
GME_data.columns = ['Date','Close', 'Open', 'High', 'Low', 'Volume', 'Dividends']
html_data_2 = GME_data
GME_data['Date'] = GME_data['Date'].astype(str)
GME_revenue['Date'] = GME_revenue['Date'].astype(str)

make_graph(GME_data, GME_revenue, 'GameStop')

